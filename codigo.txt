common_df[['original_title' , 'cast' , 'crew' , 'keywords' , 'genres']].head(3)
-----------------------------------------------------------------------------------
type(common_df.loc[0].at['cast'])
-----------------------------------------------------------------------------------
from ast import literal_eval

features = ['cast' , 'crew', 'keywords', 'genres']

for feature in features:
  common_df[feature] = common_df[feature].apply(literal_eval)
------------------------------------------------------------------------------------------
def get_director(crew):
  for crew_member in crew:
    if crew_member['job']  ==  'Director':
      return crew_member['name']
    
  return np.nan

common_df['director'] = common_df['crew'].apply(get_director)
------------------------------------------------------------------------------------------
common_df[['original_title' , 'director']].head()
-----------------------------------------------------------------
common_df.loc[0].at['cast']
------------------------------------------------------------
common_df.loc[0].at['keywords']
-----------------------------------------------
common_df.loc[0].at['genres']
---------------------------------------------
def get_name_list(column_value):
  names_list = []
  if isinstance(column_value , list):
    for element in column_value:
      names_list.append(element['name'])

  return names_list

features = ['cast' , 'keywords' , 'genres']
for feature in features:
  common_df[feature] = common_df[feature].apply(get_name_list)
---------------------------------------------------------------------------
common_df[['cast' , 'keywords' , 'genres' , 'director']].head(3)
----------------------------------------------------------------------
def clean_data(column_value):
  modified_list = []
  modified_string = ""
  if isinstance(column_value , list):
    for element in column_value:
      modified_string = element.replace(" " , "")
      modified_list.append(modified_string.lower())

    return modified_list

  elif isinstance(column_value , str):
    modified_string = column_value.replace(" " , "")
    return modified_string.lower()

  else:
    return ''

features = ['cast' , 'keywords' , 'genres' , 'director']
for feature in features:
  common_df[feature] = common_df[feature].apply(clean_data)
------------------------------------------------------------------------------
 common_df[['cast' , 'keywords' , 'genres' , 'director']].head(3)
----------------------------------------------------------------------
 b = ['hola,' , '¿', 'cómo' , 'estás' , 'tú' , '?']
c = " ".join(b)
print(c)
---------------------------------------------------------------------
def create_soup(x):
   return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])
common_df['soup'] = common_df.apply(create_soup, axis=1)
---------------------------------------------------------------------------------------------
common_df[['original_title' , 'soup']].head()
----------------------------------------------------------------------------------
from sklearn.feature_extraction.text import CountVectorizer
count = CountVectorizer(stop_words='english')
count_matrix = count.fit_transform(common_df['soup'])
-----------------------------------------------------------------------------------
from sklearn.metrics.pairwise import cosine_similarity
cosine_sim2 = cosine_similarity(count_matrix, count_matrix)
-----------------------------------------------------------------------
common_df = common_df.reset_index()
indices = pd.Series(common_df.index, index=common_df['original_title'])
-------------------------------------------------------------------------------
def get_recommendations(title, cosine_sim):
   idx = indices[title]
   sim_scores = list(enumerate(cosine_sim[idx]))
   sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
   sim_scores = sim_scores[1:11]
   movie_indices = [i[0] for i in sim_scores]
   return common_df['original_title'].iloc[movie_indices]
 -----------------------------------------------------------------------------------
 get_recommendations('Fight Club', cosine_sim2)
 -----------------------------------------------------------------------------
common_df.to_csv('movies.csv')
--------------------------------------------------------------------
from google.colab import files
files.download('movies.csv')
 
